use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent

use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Item2D
use Libraries.Containers.List



class PlayerProperties is CollisionListener2D
    PhysicsHandler physics
    Drawable player
    Drawable groundChecker
    Color playerColor
    UI ui
    boolean leftHeld = ui:GetLeftHeld()
    boolean rightHeld = ui:GeRighttHeld()
    boolean jumpPressed = ui:GetJumpPressed()



    //Support variables leftHeld, rightHeld, 
    //grounded, jumpPressed, currentSpeed
    boolean grounded = false
    Color groundCheckerColor

    
    //Create the player with pre-defined dimensions, name, color, and position
    action CreatePlayer
        player:SetName("player")
        player:LoadFilledCircle(60)
        player:SetPosition(1280,/*200.51147065127617*/ 300)
        playerColor:SetHexColor("#191970")
        player:SetColor(playerColor)
        player:EnablePhysics(true)
        player:SetResponsive()
        player:SetCollidable(true)
    end
   
/* 
    //Create the ground checker
    action CreateGroundChecker
        //Player's ground checker
        groundChecker:SetName("ground checker")
        groundChecker:LoadFilledRectangle(20,20)
        groundChecker:SetPosition(player:GetCenterX()/2, 20)
        groundCheckerColor:SetHexColor("#89CFF0")
        groundChecker:SetColor(groundCheckerColor)
        groundChecker:SetCollidable(true)
        player:Add(groundChecker)
    end
*/

    //Get the player Drawable
    action GetPlayer() returns Drawable
    return player
    end
    
/*
    //Get the ground checker Drawable
    action GetGroundChecker returns Drawable
        return groundChecker
    end
*/
    //Get the grounded boolean
    action GetGrounded returns boolean
        return grounded
    end


    


    //Move the player when the correct keys are pressed
    
    action MovePlayer
        //Speed value
        integer speed = 300
        //Move left if leftHeld is true
        if leftHeld = true
            player:SetLinearVelocityX(-speed)
        //Move right if rightHeld is true
        elseif rightHeld
            player:SetLinearVelocityX(speed)
        //Otherwise, the player doesn't move
        else
            player:SetLinearVelocityX(0)
        end
    end
    //Jumping
    action Jump
        //Jump force value
        integer jumpForce = 400
        if jumpPressed
            player:SetLinearVelocityY(jumpForce)
        end

    end

end

